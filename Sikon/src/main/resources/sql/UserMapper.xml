<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="UserMapper">


<resultMap id="userSelectMap" type="user">
		<result property="userId" 	column="user_id" 		jdbcType="VARCHAR"/>
		<result property="userName"	column="user_name" 		jdbcType="VARCHAR" />
		<result property="password" 	column="password" 		jdbcType="VARCHAR" />
		<result property="userBirth" 	column="user_birth" 		jdbcType="VARCHAR" />
		<result property="userNickname" 	column="user_nickname" 		jdbcType="VARCHAR" />
		<result property="userImage" 	column="user_image" 		jdbcType="VARCHAR" />
		<result property="addr" 	column="user_addr" 		jdbcType="VARCHAR" />
		<result property="role" 	column="role" 			jdbcType="VARCHAR" />
		<result property="phone" 	column="user_phone" 		jdbcType="VARCHAR" />
		<result property="holdpoint" 	column="holdpoint" 		jdbcType="NUMERIC" />
		<result property="mentorApply" 	column="mentor_apply" 		jdbcType="VARCHAR"  />
		<result property="loginPath" 	column="login_path" 		jdbcType="VARCHAR"  />
		<result property="regDate" 	column="user_regdate" 		jdbcType="DATE" />
		<result property="quitDate" 	column="quit_date" 		jdbcType="DATE" />
		<result property="quitStatus" 	column="quit_status" 		jdbcType="VARCHAR"  />
		
</resultMap>

 
<resultMap id="careerSelectMap" type="career">
		<result property="careerNo" 	column="career_no" 		jdbcType="NUMERIC"/>
		<result property="company"	column="company" 		jdbcType="VARCHAR" />
		<result property="careerExperience" 	 column="career_experience" 		jdbcType="VARCHAR" />
		<result property="startDate"	column="start_date" 		jdbcType="VARCHAR" />
		<result property="endDate"	column="end_date" 		jdbcType="VARCHAR" />
		<result property="userId"	column="user_id" 		jdbcType="VARCHAR" />
</resultMap>


<resultMap id="licenseSelectMap" type="license">
		<result property="licenseNo" 	column="license_no" 		jdbcType="NUMERIC"/>
		<result property="licenseName"	column="license_name" 		jdbcType="VARCHAR" />
		<result property="licenseInstitution" 	 column="license_institution" 		jdbcType="VARCHAR" />
		<result property="licenseDate"	column="license_date" 		jdbcType="VARCHAR" />
		<result property="userId"	column="user_id" 		jdbcType="VARCHAR" />
</resultMap>

<!-- <result property="careerNo" 	column="career_no" 		jdbcType="NUMERIC"/>
		<result property="company"	column="company" 		jdbcType="VARCHAR" />
		<result property="careerExperience" 	 column="career_experience" 		jdbcType="VARCHAR" />
		<result property="startDate"	column="start_date" 		jdbcType="DATE" />
		<result property="endDate"	column="end_date" 		jdbcType="DATE" />
		<result property="licenseNo" 	column="license_no" 		jdbcType="NUMERIC"/>
		<result property="licenseName"	column="license_name" 		jdbcType="VARCHAR" />
		<result property="licenseInstitution" 	 column="license_institution" 		jdbcType="VARCHAR" />
		<result property="licenseDate"	column="license_date" 		jdbcType="DATE" />
 -->






	<!-- 회원가입 -->
	<insert  id="addUser"		parameterType="user" >
		 INSERT
		 INTO users( user_id , user_name , password , user_birth , user_nickname , user_image , user_addr , user_phone , mentor_apply , user_regdate , quit_date ) 
		 VALUES	 ( #{userId} , #{userName} , #{password} , #{userBirth}, #{userNickname}, #{userImage}, #{addr}, #{phone}, 
						#{mentorApply}, SYSDATE , #{quitDate:DATE} )
<!--  	 INTO career( career_no , company , career_experience , start_date , end_date , user_id )
		 VALUES ( seq_career_career_no.nextval , #{career.company} , #{career.careerExperience} , #{career.startDate:DATE} , #{career.endDate:DATE} , #{career.userId} )
		 INTO license( license_no , license_name , license_institution , license_date , user_id )
		 VALUES ( seq_license_license_no.nextval , #{license.licenseName} , #{license.licenseInstitution} , #{license.licenseDate:DATE} , #{license.userId})
  		 SELECT * FROM DUAL
 -->
	</insert>

	
						
	<insert id="addLicense" parameterType="map">
        insert 
        into license(license_no , license_name , license_institution , license_date , user_id)
        select seq_license_license_no.nextval AS licenseNo, A.*
        FROM (
        <foreach collection="list" item="item" separator="UNION ALL ">
        SELECT #{item.licenseName}, #{item.licenseInstitution}, #{item.licenseDate:VARCHAR}, #{item.userId} FROM DUAL
        </foreach>
        ) A
	 </insert>
	 
	 
	 <insert id="addCareer" parameterType="map">
        insert 
        into career(career_no , company , career_experience , start_date , end_date , user_id)
        select seq_career_career_no.nextval AS careerNo, A.*
        FROM (
        <foreach collection="list" item="item" separator="UNION ALL ">
        SELECT #{item.company}, #{item.careerExperience}, #{item.startDate:VARCHAR}, #{item.endDate:VARCHAR}, #{item.userId} FROM DUAL
        </foreach>
        ) A
	 </insert>


	
	<!-- id 중복체크 -->
	 <select id="checkId" parameterType="String" resultType="int">
		SELECT COUNT(user_id)
		FROM users
		WHERE user_id= #{userId}
	</select>
	
	<!-- id 중복체크 -->
	 <select id="checkNickname" parameterType="String" resultType="int">
		SELECT COUNT(user_nickname)
		FROM users
		WHERE user_nickname= #{userNickname}
	</select>
 
	<!-- 회원상세조회 -->
	<select  id="getUser"		parameterType="string"	resultMap="userSelectMap">
		SELECT *
		FROM users
		WHERE user_id = #{userId}
        </select>

	<!-- 자격증 조회 -->
	<select  id="getLicense"	parameterType="string"	resultMap="licenseSelectMap">
		SELECT *
		FROM license
		WHERE user_id = #{userId}
	</select>
	
	<!-- 경력사항 조회 -->
	<select  id="getCareer"		parameterType="string"	resultMap="careerSelectMap">
		SELECT *
		FROM career
		WHERE user_id = #{userId}
	</select>
	
	<!-- 멘토상세조회 -->
	<select  id="getUCL"		parameterType="string"	resultMap="userSelectMap">
		SELECT a.*, b.*, c.*
		FROM users a, license b, career c
		WHERE a.user_id = b.user_id 
	     AND b.user_id = c.user_id
	     AND a.user_id = c.user_id
	     AND a.user_id = #{userId}
        </select>
        
		
	
	<!-- ID찾기 -->
	<select  id="findUserId"	parameterType="user"	resultType="string">
		SELECT NVL(user_id, 0)
		FROM users
		WHERE user_name = #{userName}
		AND user_phone = #{phone}
	<!--  	     AND user_birth = #{userBirth}
		    		 
	-->
	</select>

	<!--  비밀번호 찾기 -->
	<update id="updateUserPw" parameterType="user" >
	UPDATE users
	<set>
	password	= #{password}
	</set>
	WHERE user_id = #{userId}
<!--  AND user_name = #{userName}-->
	</update>
	
	<!--  쿠킹멘토 승인 -->
	<update id="changeUserRole" parameterType="user" >
	UPDATE users
	<set>
	role	= #{role}
	</set>
	WHERE user_id = #{userId}
	</update>
	
	<!--  쿠킹멘토 거절 -->
	<update id="backUserRole" parameterType="user" >
	UPDATE users
	<set>
	mentor_apply	= #{mentorApply}
	</set>
	WHERE user_id = #{userId}
	</update>
	
	<!-- 비밀번호 찾기 유효성 검사  -->
	<select id="findUserPwCheck" resultType="int">
	SELECT count(*)
	FROM users
	WHERE user_id = #{userId}
	 AND user_name = #{userName}
	</select>

	<!-- 회원수정 -->
	<update	id="updateUser"	parameterType="user" >
	   	UPDATE users
	   	<set>
			password	= #{password} , 
	   		user_name 	= #{userName} ,
			user_nickname	= #{userNickname} ,
			user_birth	= #{userBirth} ,
			user_addr 	= #{addr} ,
			user_phone	= #{phone} ,
			user_image	= #{userImage} ,
			mentor_apply	= #{mentorApply} ,
			holdpoint	= #{holdpoint}
		</set>
	   	WHERE user_id = #{userId}
	</update>


	<update	id="updateLicense" 	parameterType="map" >
		UPDATE license
		set
		license_name=case
		license_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.licenseNo} then #{item.licenseName}
		</foreach>
		else license_name end
		,
		license_institution=case
		license_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.licenseNo} then #{item.licenseInstitution}
		</foreach>
		else license_institution end
		,
		license_date=case
	 	license_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.licenseNo} then #{item.licenseDate:VARCHAR}
		</foreach>
		else TO_CHAR(SYSDATE, 'yyyy-mm-dd') end
		WHERE user_id = #{userId}
	</update>
	
	
	<update	id="updateCareer" 	parameterType="map" >
		UPDATE career
		set	company=case
		career_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.careerNo} then #{item.company}
		</foreach>
		else company end
		,
		career_experience=case
		career_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.careerNo} then #{item.careerExperience}
		</foreach>
		else career_experience end
		,
		start_date=case
		career_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.careerNo} then #{item.startDate:VARCHAR}
		</foreach>
		else TO_CHAR(SYSDATE, 'yyyy-mm-dd') end
		,
		end_date=case
		career_no
		<foreach collection="list" item="item" separator=" ">
		when #{item.careerNo} then #{item.endDate:VARCHAR}
		</foreach>
		else TO_CHAR(SYSDATE, 'yyyy-mm-dd') end
		WHERE user_id = #{userId}
	</update>

 
		



	<!-- 회원목록 -->
	<select  id="getUserList"  parameterType="search"	resultMap="userSelectMap">
	  	SELECT *
	  	FROM (	SELECT inner_table.* , ROWNUM AS row_seq
	  					FROM		(	SELECT user_id , user_name , user_nickname
											FROM users
											 
											 <if test="orderCondition == null ">
												ORDER BY user_id DESC
											 </if>
																	
											 <if test="orderCondition != null ">
											 
											 <choose>
											 <when test="orderCondition == 0 ">
											   		ORDER BY user_id DESC
											  </when>
											  <when test="orderCondition == 1 ">
											  		WHERE role LIKE 'user'
											  		AND mentor_apply LIKE UPPER ('N')
											   		ORDER BY user_id DESC
											  </when>
											  <when test="orderCondition == 2 ">
											  		WHERE mentor_apply LIKE UPPER ('Y')
											  		AND role LIKE 'user'
											  </when>
											  <when test="orderCondition == 3 ">
											      	where role LIKE 'mentor'
											  </when>
											  
											 </choose>
											 </if>
								 ) inner_table
						WHERE ROWNUM &lt;= #{endRowNum} )
		WHERE row_seq BETWEEN #{startRowNum} AND #{endRowNum} 
	 </select>
	


	<!-- 회원탈퇴 -->
	<update id="deleteUser" parameterType="user" >
		UPDATE users
		<set>
			quit_status	= #{quitStatus} ,
			quit_date	= SYSDATE 

		</set>
		WHERE user_id = #{userId}
	</update>
	
	
	<select  id="getTotalCount"  parameterType="search"	 resultType="int">
	  	SELECT COUNT(*)
	  	FROM(	SELECT user_id , user_name , user_nickname
						FROM users
											<if test="orderCondition == null ">
												ORDER BY user_id DESC
											</if>
											
											<if test="orderCondition != null ">
											 
											 <choose>
											 <when test="orderCondition == 0 ">
											   		ORDER BY user_id DESC
											  </when>
											  <when test="orderCondition == 1 ">
											  		WHERE role LIKE 'user'
											  		AND mentor_apply LIKE UPPER ('N')
											   		ORDER BY user_id DESC
											  </when>
											  <when test="orderCondition == 2 ">
											  		where mentor_apply LIKE UPPER ('Y')
											  		AND role LIKE 'user'
											  </when>
											  <when test="orderCondition == 3 ">
											      	where role LIKE 'mentor'
											  </when>
											  <otherwise>
											  </otherwise>
											 </choose>
											 </if>
						 ) countTable						
	 </select>
	 
</mapper>
