<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
		xmlns:context="http://www.springframework.org/schema/context"
		xmlns:mvc="http://www.springframework.org/schema/mvc"
		xmlns:websocket="http://www.springframework.org/schema/websocket"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation=
				"http://www.springframework.org/schema/beans 
				http://www.springframework.org/schema/beans/spring-beans.xsd
				
				http://www.springframework.org/schema/context 
				http://www.springframework.org/schema/context/spring-context.xsd
				
				http://www.springframework.org/schema/websocket
				http://www.springframework.org/schema/websocket/spring-websocket.xsd
				
				http://www.springframework.org/schema/mvc
				http://www.springframework.org/schema/mvc/spring-mvc.xsd">
    
   <!-- :: 공통적인 사항을 설정한 common-servlet.xml 사용. -->
       
   	<context:component-scan base-package="com.sikon.web">
		<context:include-filter 	type="annotation"		expression="org.springframework.stereotype.Controller" />
		<context:exclude-filter 	type="annotation" 	expression="org.springframework.stereotype.Service"/>
		<context:exclude-filter 	type="annotation" 	expression="org.springframework.stereotype.Repository"/>
	</context:component-scan> 
	
	
   	<!-- ■ DefaultAnnotationHandlerMapping 설정 등 기타 Annotation 기반 모든 기능을 사용 할 수 있는 아래의 설정으로 변경 -->
	<mvc:annotation-driven />
	
	<bean id="myHandler" class="com.sikon.common.EchoHandler" />
	<websocket:handlers>
		<websocket:mapping handler="myHandler" path="/alarm" />
		<websocket:handshake-interceptors>
	         <bean class="org.springframework.web.socket.server.support.HttpSessionHandshakeInterceptor"/>
	      </websocket:handshake-interceptors>
		<websocket:sockjs websocket-enabled="true"/>
	</websocket:handlers>
		
	<!--  :: ViewResolver 선언 -->	
    <bean id="viewResolver"
				class="org.springframework.web.servlet.view.InternalResourceViewResolver" />
	
	<!--  :: FileUpload를 위한 MultiPartResolver 선언 -->	
    <bean id="multipartResolver"
				class="org.springframework.web.multipart.support.StandardServletMultipartResolver" />
				
	<bean id="filterMultipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <property name="defaultEncoding" value="utf-8"/>
	<!-- 파일업로드 크기 10MB로 설정 -->
    <property name="maxUploadSize" value="104857600"/>
	</bean>
	
		
	<!--	
		■ / 형식의 Mapping 은 모든(정적,동적 자원) 요청시 처리책임
		■ 정적자원 요청시 DispatcherServlet 에게 처리방법지정
	    ■ 정적자원요청 (아래의 URI 포함 요청)시 Controller 타지 않도록 처리 경로 location 지정 
	     	
	    실제 PJT 진행시 일반적으로 resources 폴더를 만들고 폴더내부에
	     css , image, js 등 넣어 관리하며 아래와 같이 1번의 설정으로 관리
	     <mvc:resources mapping="/resources/**" location="/resources/" />
	     
	<mvc:resources mapping="/css/**" location="/css/" />
   	<mvc:resources mapping="/images/**" location="/images/" />
   	<mvc:resources mapping="/javascript/**" location="/javascript/" />
	--> 
	<mvc:resources mapping="/resources/**" location="/resources/" />
   	<mvc:resources mapping="/summernoteImage/**" location="file:///C:/Users/bitcamp/git/Sikon_PJT/Sikon/src/main/webapp/resources/images/uploadFiles/summerNote/" />
   	

	<!-- 	:: exception resolver  선언 :: 서술적 / 선언적 예외처리 
			:: Servlet 에서의 선언적 예외처리를 다시 생각하며....  -->
	<bean id="exceptionResolver"
				class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		
		<property name="exceptionMappings">
			<props>
				<prop key="java.lang.NullPointerException">/common/nullError.jsp</prop>
				<prop key="java.lang.NumberFormatException">/common/numberFormatError.jsp</prop>
			</props>
		</property>
		
		<property name="defaultErrorView"	value="/common/error.jsp" />
		
	</bean>
	
	<!-- navermail설정 -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
	<property name="host" value="smtp.naver.com"/> <!-- 메이서버 호스트 -->
	<property name="port" value="587"/> <!-- 메이서버 포트번호 -->
	<property name="username" value="se981106"/> <!-- 자신의 이메일 아이디 -->
	<property name="password" value="soccer116"/> <!-- 자신의 비밀번호 -->
	<!-- 보안연결 SSL과 관련된 설정 -->
	<property name="javaMailProperties">
		<props>
			<prop key="mail.smtp.auth">true</prop>
			<prop key="mail.smtp.starttls.enable">true</prop>
			<prop key="mail.smtps.checkserveridentity">true</prop>
			<prop key="mail.transport.protocol">smtp</prop>
			<prop key="mail.smtps.ssl.trust">*</prop>
			<prop key="mail.debug">true</prop>
			<prop key="mail.smtp.socketFactory.class">javax.net.ssl.SSLSocketFactory</prop>
		</props>
	</property>
	</bean>
	
</beans>